{"version":3,"sources":["../../src/db/DB.js"],"names":["logUtils","require","mongoose","DB","connect","server","poolSize","useMongoClient","promiseLibrary","name","schema","options","op","post","fn","on","doc","logUserModify","Date","now","pre","logDebug","model","page","onQuery","findOptions","newPage","pageSize","total","skip","limit","Math","max","conditions","find","count","datas","query","list","GET_FAIL","save","data","ADD_FAIL","update","UPDATE_FAIL","deleteMany","DELETE_FAIL","ids","length","remove","_id","$in","id","findById","module","exports"],"mappings":"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","file":"DB.js","sourcesContent":["'use strict'\r\n\r\nvar logUtils = require('../utils/log-utils')\r\nvar mongoose = require('mongoose');\r\n\r\nimport { ApiError, ApiErrorNames } from '../error/api-errors'\r\n\r\nclass DB {\r\n\r\n    constructor() {}\r\n\r\n    static async connect() {\r\n        await mongoose.connect('mongodb://localhost:27017/web-ww',{ \r\n            server: { poolSize: 4 },\r\n            useMongoClient: true,\r\n            promiseLibrary: require('bluebird')\r\n        });\r\n    }\r\n\r\n    static collection(name) {\r\n        // return db.get(name);\r\n    }\r\n\r\n    static async test() {\r\n        // var kitty = new Cat({ name: 'Zildjian' });\r\n\r\n        // await kitty.save();\r\n    }\r\n    \r\n    static async queryTest() {\r\n        // DB.test();\r\n        // return await Cat.findOne({},['name']).exec();\r\n    }\r\n\r\n    static addPost(schema, options) {\r\n        for(let op of options) {\r\n            schema.post(op.name, op.fn ? on.fn : (doc) => {\r\n                DB.post(op.name, doc);\r\n            });\r\n        }\r\n    }\r\n\r\n    static post(name, doc) {\r\n        logUtils.logUserModify(name, doc, Date.now)\r\n    }\r\n    \r\n    static addPre(schema, options) {\r\n        for(let op of options) {\r\n            schema.pre(op.name, op.fn ? on.fn : (doc) => {\r\n                DB.pre(op.name, doc);\r\n            });\r\n        }\r\n    }\r\n\r\n    static pre(name, doc) {\r\n        logUtils.logUserModify(name, doc, Date.now)\r\n        logUtils.logDebug(name, Date.now);\r\n    }\r\n\r\n    static async getList(model, options, page, onQuery) {\r\n        if (model) {\r\n            let findOptions = options.options || {};\r\n            let newPage = {page:-1, pageSize:0, total:0};\r\n            if (page && page.pageSize>-1) {\r\n                let skip = 0;\r\n                let limit = page.page || 100;\r\n                if (page.page) {\r\n                    skip = Math.max(page.page-1,0) * limit;\r\n                }\r\n                findOptions.limit = limit;\r\n                findOptions.skip = skip;\r\n                newPage.page = page.page;\r\n                newPage.pageSize = limit;\r\n            }\r\n\r\n            let conditions = options.conditions || {};\r\n            if (page && page.page>-1) {\r\n                newPage.total = await model.find(conditions).count();\r\n            }\r\n            let datas = null;\r\n            if (onQuery) {\r\n                let query = model.find(conditions, null, findOptions);\r\n                datas = await onQuery(query);\r\n            } else {\r\n                datas = await model.find(conditions, null, findOptions);\r\n            }\r\n            return {list:datas, page:newPage};\r\n        } else {\r\n            throw new ApiError(ApiErrorNames.GET_FAIL);\r\n        }\r\n    }\r\n\r\n    static async add(model, doc, options={}) {\r\n        if (doc && model) {\r\n            let data = await new model(doc).save(options);\r\n            if (data) {\r\n            return data;\r\n            } else {\r\n            throw new ApiError(ApiErrorNames.ADD_FAIL);\r\n            }\r\n        } else {\r\n            throw new ApiError(ApiErrorNames.ADD_FAIL);\r\n        }\r\n    }\r\n\r\n    static async update(model, conditions, doc, options) {\r\n        if (doc && conditions && model) {\r\n            return await model.update(conditions, doc, options);\r\n        } else {\r\n            throw new ApiError(ApiErrorNames.UPDATE_FAIL);\r\n        }\r\n    }\r\n\r\n    static async remove(model, conditions) {\r\n        if (conditions && model) {\r\n            return await model.deleteMany(conditions);\r\n        } else {\r\n            throw new ApiError(ApiErrorNames.DELETE_FAIL);\r\n        }\r\n    }\r\n    \r\n    static async removeByIds(model, ids) {\r\n        if (ids && ids.length > 0 && model) {\r\n            return await DB.remove(model, {_id:{$in:ids}});\r\n        } else {\r\n            throw new ApiError(ApiErrorNames.DELETE_FAIL);\r\n        }\r\n    }\r\n    \r\n    static async find(model, conditions, onQuery) {\r\n        if (conditions && model) {\r\n            if (onQuery) {\r\n                let query = model.find(conditions);\r\n                return await onQuery(query);\r\n            } else {\r\n                return await model.find(conditions);\r\n            }\r\n        } else {\r\n            throw new ApiError(ApiErrorNames.DELETE_FAIL);\r\n        }\r\n    }\r\n\r\n    static async findById(model, id, onQuery) {\r\n        if (id && model) {\r\n            if (onQuery) {\r\n                let query = model.findById(id);\r\n                return await onQuery(query);\r\n            } else {\r\n                return await model.findById(id);\r\n            }\r\n        } else {\r\n            throw new ApiError(ApiErrorNames.GET_FAIL);\r\n        }\r\n    }\r\n\r\n}\r\nDB.connect();\r\n// var Cat = mongoose.model('Cat', { name: String });\r\n\r\nmodule.exports = DB;"]}