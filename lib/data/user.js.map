{"version":3,"sources":["../../src/data/user.js"],"names":["logUtil","require","UserData","type","USER_TYPES","shopGuide","operate","production","admin","query","populate","exec","ctx","params","model","getUserModel","user_type","skip","limit","pageSize","page","Math","max","conditions","find","count","total","populateUserModel","users","console","log","JSON","stringify","list","UPDATE_FAIL","id","user","findOne","_id","getUserById","account","password","checkAccount","checkPassword","ACCOUNT_PASSWORD_ERROR","acUser","ACCOUNT_EXIST","info","sha1","save","newUser","findByIdAndUpdate","new","result","userType","fields","options","modelOptions","_model","findById","userInfo","ids","deleteMany","$in","length","i","findByIdAndRemove","ret","deleteOne","parse","ok","n","debug","DELETE_FAIL","superAdmin","session","success","value","IsString","ACCOUNT_MIN_LENGTH","ACCOUNT_MAX_LENGTH","isPasswordValid","isAccountValid","module","exports"],"mappings":"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","file":"user.js","sourcesContent":["\r\nimport { \r\n  userModel, \r\n  userShopGuideModel, \r\n  userOperateModel, \r\n  userProductionModel,\r\n  userAdminModel,\r\n  accountModel\r\n} from '../models/index.js'\r\n\r\nimport { ApiError, ApiErrorNames } from '../error/api-errors'\r\nimport utils from '../utils/utils'\r\nimport baseUtils from '../base/utils/utils'\r\nimport constants from '../constants/constants'\r\n// import \r\n\r\nconst logUtil = require('../utils/log-utils');\r\n\r\n\r\n\r\nclass UserData {\r\n\r\n  getUserModel(type) {\r\n    switch(type) {\r\n      case constants.USER_TYPES.shopGuide: \r\n        return userShopGuideModel;\r\n      case constants.USER_TYPES.operate:\r\n        return userOperateModel;\r\n      case constants.USER_TYPES.production:\r\n        return userProductionModel;\r\n      case constants.USER_TYPES.admin:\r\n        return userAdminModel;\r\n      default:\r\n      break;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  async populateUserModel(type, query) {\r\n    switch(type) {\r\n      case constants.USER_TYPES.shopGuide: \r\n        return await query.populate('account').populate('shop').exec();\r\n      case constants.USER_TYPES.operate:\r\n        return await query.populate('account').exec();\r\n      case constants.USER_TYPES.production:\r\n        return await query.populate('account').exec();\r\n      case constants.USER_TYPES.admin:\r\n        return await query.populate('account').exec();\r\n      default:\r\n      break;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  static checkPassword (value)  {\r\n    if (!value) return false;\r\n\r\n    if (!baseUtils.IsString(value)) return false;\r\n\r\n    if (value.length < constants.ACCOUNT_MIN_LENGTH || value.length > constants.ACCOUNT_MAX_LENGTH) return false;\r\n\r\n    return utils.isPasswordValid(value);\r\n  }\r\n    \r\n  static checkAccount (value) {\r\n    if (!value) return false;\r\n\r\n    if (!baseUtils.IsString(value)) return false;\r\n\r\n    if (value.length < constants.ACCOUNT_MIN_LENGTH || value.length > constants.ACCOUNT_MAX_LENGTH) return false;\r\n\r\n    return utils.isAccountValid(value);\r\n  }\r\n\r\n  async getUserList(ctx, params) {\r\n    let model = this.getUserModel(params.user_type);\r\n    if (model) {\r\n      let skip = 0;\r\n      let limit = params.pageSize || 100;\r\n      if (params.page) {\r\n        skip = Math.max(params.page-1,0) * limit;\r\n      }\r\n      let conditions = params.conditions || {};\r\n      let total = await model.find(conditions).count();\r\n      let users = await this.populateUserModel(params.user_type, model.find(conditions).skip(skip).limit(limit));\r\n      console.log('users' + JSON.stringify(users));\r\n      return {\r\n        page:{page:params.page, pageSize:limit, total:total},\r\n        list: users\r\n      };\r\n    } else {\r\n      throw new ApiError(ApiErrorNames.UPDATE_FAIL);\r\n    }\r\n  }\r\n\r\n  async getUserById(type, id) {\r\n    let user = null;\r\n    let model = this.getUserModel(type);\r\n    if (model) {\r\n      user = await this.populateUserModel(type, model.findOne({_id:id}));\r\n    } else {\r\n      throw new ApiError(ApiErrorNames.UPDATE_FAIL);\r\n    }\r\n    return user;\r\n  }\r\n\r\n  async getUser(ctx, params) {\r\n    if (params.user_type) {\r\n      return null;\r\n    } else {\r\n      return await getUserById(params.type, params.id);\r\n      if (!user) {\r\n        throw new ApiError(ApiErrorNames.UPDATE_FAIL);\r\n      }\r\n\r\n      return user;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 添加用户信息\r\n   * \r\n   * @param {any} ctx \r\n   * @param {user{usertype}, account{account, password}} params\r\n   * @returns \r\n   * @memberof UserData\r\n   */\r\n  async addUser(ctx, params) {\r\n    if (!params.user_type) {\r\n      throw new ApiError(ApiErrorNames.UPDATE_FAIL);\r\n    } else {\r\n      \r\n      if (!params.user) { // 必须有用户信息\r\n        throw new ApiError(ApiErrorNames.UPDATE_FAIL);\r\n      }\r\n\r\n      let account = null;\r\n      if (params.account && params.account.account && params.account.password) {\r\n        // 验证格式是否合法\r\n        if (!UserData.checkAccount(params.account.account) || !UserData.checkPassword(params.account.password)) {\r\n          throw new ApiError(ApiErrorNames.ACCOUNT_PASSWORD_ERROR);\r\n        }\r\n        account = await accountModel.findOne({account:params.account.account});\r\n        if (account && account.user) {\r\n          let acUser = await this.getUserById(account.user_type, account.user);\r\n          if (acUser)\r\n            throw new ApiError(ApiErrorNames.ACCOUNT_EXIST); // 账号已存在\r\n        }\r\n        \r\n        if (!account) {// 如果没有账号创建账号\r\n          let info = {account:params.account.account, password:utils.sha1(params.account.password), user_type:params.user_type};\r\n          account = await (new accountModel(info)).save();\r\n        }\r\n      }\r\n\r\n      // 开始创建用户表\r\n      let user = null;\r\n      let model = this.getUserModel(params.user_type);\r\n      if (model) {\r\n        user = new model(params.user);\r\n      }\r\n      if (user) {\r\n        let newUser = await user.save();\r\n        if (newUser) {\r\n          let info = {account:params.account.account, password:utils.sha1(params.account.password), user:newUser._id, user_type:params.user_type};\r\n          if (account) { // 有账号但是没有使用，直接更新\r\n            await accountModel.findByIdAndUpdate(account._id, info, {new:true});\r\n          }\r\n\r\n          if (account) { // 如果账号更新成功，则更新user中的account字段\r\n            newUser = model.findByIdAndUpdate(newUser._id, {account:account._id}, {new:true}).populate('account');\r\n          }\r\n        }\r\n        ctx.result = '添加成功！';\r\n        return newUser;\r\n      } else {\r\n        throw new ApiError(ApiErrorNames.UPDATE_FAIL);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {*} ctx \r\n   * @param {user{userType}, account{account, password}} params\r\n   */\r\n  async updateUser(userType, fields, options, modelOptions) {\r\n    if (!userType) {\r\n      throw new ApiError(ApiErrorNames.UPDATE_FAIL);\r\n    }\r\n    if (!fields._id) {\r\n      throw new ApiError(ApiErrorNames.UPDATE_FAIL);\r\n    }\r\n\r\n    let account = null;\r\n    // 更新账号信息\r\n    if (fields.account) {\r\n      let info = {};\r\n      if ('account' in fields.account) {\r\n        // 验证账号格式是否合法\r\n        if (!UserData.checkAccount(fields.account.account)) {\r\n          throw new ApiError(ApiErrorNames.ACCOUNT_PASSWORD_ERROR);\r\n        }\r\n        info.account = fields.account.account;\r\n      }\r\n      if ('password' in fields.account) {\r\n        // 验证密码格式是否合法\r\n        if (!UserData.checkPassword(fields.account.password)) {\r\n          throw new ApiError(ApiErrorNames.ACCOUNT_PASSWORD_ERROR);\r\n        }\r\n        info.password = utils.sha1(fields.account.password);\r\n      }\r\n      if (info) {\r\n        if (info.account) {\r\n          // 获取账号信息\r\n          account = await accountModel.findOne({account:info.account})\r\n          if (account && account.user) {\r\n            // 根据账号获取用户信息\r\n            let _model = this.getUserModel(account.user_type);\r\n            if (_model) {\r\n              let userInfo = await _model.findById(account.user);\r\n              // 判断查找到的用户是否是要更新的用户\r\n              if (userInfo && (userInfo._id !== fields._id || account.user_type !== userType)) {\r\n                throw new ApiError(ApiErrorNames.ACCOUNT_EXIST);\r\n              }\r\n            }\r\n          }\r\n        }\r\n        if (fields.account._id) { // 如果有账号则更新\r\n          account = await accountModel.findByIdAndUpdate(fields.account._id, info, {new:true});\r\n        } else { // 没有添加\r\n          info.user_type = userType;\r\n          info.user = fields._id;\r\n          if (account) {\r\n            account = accountModel.findByIdAndUpdate(account._id, info, {new:true});\r\n          } else {\r\n            account = await (new accountModel(info)).save();\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    try {\r\n      let user = null;\r\n      let model = this.getUserModel(userType);\r\n      if (model) {\r\n        let info = {...fields};\r\n        if (account) {\r\n          info.account = account._id;\r\n        } else {\r\n          info.account = '';\r\n        }\r\n        console.log('update user' + JSON.stringify(fields) + \"; info=\" + JSON.stringify(info));\r\n        user = await model.findByIdAndUpdate(fields._id, info, modelOptions||{new:true});\r\n        console.log('update user' + JSON.stringify(user));\r\n        return user;\r\n      } else {\r\n        throw new ApiError(ApiErrorNames.UPDATE_FAIL);\r\n      }\r\n    } catch(e) {\r\n      // if (account && account._id) {\r\n      //   info.account = account._id;\r\n      // }\r\n      throw new ApiError(ApiErrorNames.UPDATE_FAIL);\r\n    }\r\n  }\r\n\r\n  async deleteUserByIds(type, ids) {\r\n    let users = null;\r\n    let model = this.getUserModel(type);\r\n    if (model) {\r\n      users = await model.deleteMany({_id:{$in:ids}});\r\n      if (users && users.length > 0) {\r\n        for(let i=0; i<users.length; i++) {\r\n          await accountModel.findByIdAndRemove(users[i].account);\r\n        }\r\n      }\r\n      return users;\r\n    } else {\r\n      throw new ApiError(ApiErrorNames.UPDATE_FAIL);\r\n    }\r\n  }\r\n\r\n  async deleteUserById(type, id) {\r\n    let user = null;\r\n    let model = this.getUserModel(type);\r\n    if (model) {\r\n      user = await model.findByIdAndRemove(id);\r\n      if (user) {\r\n        await accountModel.findByIdAndRemove(user.account);\r\n      }\r\n      return user;\r\n    } else {\r\n      throw new ApiError(ApiErrorNames.UPDATE_FAIL);\r\n    }\r\n  }\r\n\r\n  async deleteUser(ctx, params) {\r\n    let ret = null;\r\n    let model = this.getUserModel(params.user_type);\r\n    if (model || (params.ids && params.ids.length>0)) {\r\n      if (params.ids.length === 1) {\r\n        ret = await model.deleteOne({_id:params.ids[0]});\r\n      } else {\r\n        ret = await model.deleteMany({_id:{$in:params.ids}});\r\n      }\r\n      if (ret) {\r\n        ret = JSON.parse(ret);\r\n      }\r\n      if (ret && ret.ok == 1) {\r\n        if (params.ids.length !== ret.n)\r\n        {\r\n          logUtil.debug('delete user count not equal ids=' + JSON.stringify(params.ids) + '; result=' + JSON.stringify(ret))\r\n        }\r\n        return params.ids;\r\n      } else {\r\n        throw new ApiError(ApiErrorNames.DELETE_FAIL);\r\n      }\r\n    } else {\r\n      throw new ApiError(ApiErrorNames.DELETE_FAIL);\r\n    }\r\n  }\r\n\r\n  // async \r\n\r\n  async login(ctx, params) {\r\n    let superAdmin = require('./super-admin');\r\n    if (superAdmin.account.account === params.account) {\r\n      ctx.session.user = superAdmin;\r\n      return superAdmin;\r\n    }\r\n\r\n    if (ctx.session.user){\r\n      logUtil.debug('login user session====' + JSON.stringify(ctx.session.user))\r\n      return ctx.session.user;\r\n    }\r\n\r\n    if (!UserData.checkAccount(params.account) || !UserData.checkPassword(params.password)) {\r\n      throw new ApiError(ApiErrorNames.ACCOUNT_PASSWORD_ERROR);\r\n    }\r\n\r\n    let user = null;\r\n    const account = await accountModel.findOne({account:params.account, password:utils.sha1(params.password)});\r\n    if (account) {\r\n      user = await this.getUserById(account.user_type, account.user);\r\n    } else {\r\n      throw new ApiError(ApiErrorNames.ACCOUNT_PASSWORD_ERROR);\r\n    }\r\n    if (!user) {\r\n      throw new ApiError(ApiErrorNames.ACCOUNT_PASSWORD_ERROR);\r\n    }\r\n    ctx.session.user = user;\r\n    return user;\r\n  }\r\n  \r\n  async logout(ctx, params) {\r\n    ctx.session.user = null;\r\n    return {success:true};\r\n  }\r\n\r\n  types() {\r\n    return constants.USER_TYPES;\r\n  }\r\n}\r\n\r\nmodule.exports = new UserData();"]}