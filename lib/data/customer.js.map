{"version":3,"sources":["../../src/data/customer.js"],"names":["logUtil","require","CustomerData","page","options","skip","limit","pageSize","Math","max","findOptions","conditions","find","count","total","customers","map","item","list","projection","findOne","customer","UPDATE_FAIL","doc","save","newcustomer","ADD_FAIL","update","ret","model","deleteMany","DELETE_FAIL","ids","length","remove","_id","$in","module","exports"],"mappings":";;;;AAAA;;;;AAEA;;AAWA;;AACA;;;;AACA;;;;AACA;;;;;;;;;;AACA;;AAEA,IAAMA,UAAUC,QAAQ,oBAAR,CAAhB;;IAEMC,Y;;;;;;;;;AAEJ;;;;;;;;0FAOcC,I,EAAMC,O;;;;;;AACdC,oB,GAAO,C;AACPC,qB,GAAQH,KAAKI,QAAL,IAAiB,G;;AAC7B,oBAAIJ,KAAKA,IAAT,EAAe;AACbE,yBAAOG,KAAKC,GAAL,CAASN,KAAKA,IAAL,GAAU,CAAnB,EAAqB,CAArB,IAA0BG,KAAjC;AACD;AACGI,2B,GAAcN,QAAQA,OAAR,IAAmB,E;;AACrCM,4BAAYJ,KAAZ,GAAoBA,KAApB;AACAI,4BAAYL,IAAZ,GAAmBA,IAAnB;AACIM,0B,GAAaP,QAAQO,UAAR,IAAsB,E;;uBACrB,qBAAcC,IAAd,CAAmBD,UAAnB,EAA+BE,KAA/B,E;;;AAAdC,qB;;uBACkB,qBAAcF,IAAd,CAAmBD,UAAnB,EAA+B,IAA/B,EAAqCD,WAArC,C;;;AAAlBK,yB;;AACJA,4BAAYA,UAAUC,GAAV,CAAc,UAACC,IAAD,EAAU;AAClC,yBAAOA,IAAP;AACD,iBAFW,CAAZ;iDAGO;AACLd,wBAAK,EAACA,MAAKA,KAAKA,IAAX,EAAiBI,UAASD,KAA1B,EAAiCQ,OAAMA,KAAvC,EADA;AAELI,wBAAMH;AAFD,iB;;;;;;;;;;;;;;;;;;;4FAMEJ,U,EAAYQ,U,EAAYf,O;;;;;;;uBACZ,qBAAcgB,OAAd,CAAsBT,UAAtB,EAAkCQ,UAAlC,EAA8Cf,OAA9C,C;;;AAAjBiB,wB;;qBACAA,Q;;;;;kDACKA,Q;;;sBAED,wBAAa,yBAAcC,WAA3B,C;;;;;;;;;;;;;;;;;;;4FAIAC,G;YAAKnB,O,uEAAQ,E;;;;;;qBACjBmB,G;;;;;AACEF,wB,GAAW,yBAAkBE,GAAlB,C;;qBACXF,Q;;;;;;uBACsBA,SAASG,IAAT,CAAcpB,OAAd,C;;;AAApBqB,2B;;qBACAA,W;;;;;kDACKA,W;;;;;;;sBAGH,wBAAa,yBAAcC,QAA3B,C;;;;;;;sBAGF,wBAAa,yBAAcA,QAA3B,C;;;;;;;;;;;;;;;;;;;4FAIGf,U,EAAYY,G,EAAKnB,O;;;;;;qBACxBmB,G;;;;;;uBACc,qBAAcI,MAAd,CAAqBhB,UAArB,EAAiCY,GAAjC,EAAsCnB,OAAtC,C;;;AAAZwB,mB;kDACGA,G;;;sBAED,wBAAa,yBAAcN,WAA3B,C;;;;;;;;;;;;;;;;;;;4FAIGX,U;;;;;qBACPA,U;;;;;;uBACWkB,MAAMC,UAAN,CAAiBnB,UAAjB,C;;;;;;sBAEP,wBAAa,yBAAcoB,WAA3B,C;;;;;;;;;;;;;;;;;;;4FAIQC,G;;;;;sBACZA,OAAOA,IAAIC,MAAJ,GAAa,C;;;;;;uBACT,qBAAcC,MAAd,CAAqB,EAACC,KAAI,EAACC,KAAIJ,GAAL,EAAL,EAArB,C;;;;;;sBAEP,wBAAa,yBAAcD,WAA3B,C;;;;;;;;;;;;;;;;;;;;;AAKZM,OAAOC,OAAP,GAAiB,IAAIpC,YAAJ,EAAjB","file":"customer.js","sourcesContent":["import moment from 'moment'\r\n\r\nimport { \r\n  userModel, \r\n  usercustomerGuideModel, \r\n  userOperateModel, \r\n  userProductionModel,\r\n  userAdminModel,\r\n  accountModel,\r\n  shopModel,\r\n  customerModel\r\n} from '../models/index.js'\r\n\r\nimport { ApiError, ApiErrorNames } from '../error/api-errors'\r\nimport utils from '../utils/utils'\r\nimport baseUtils from '../base/utils/utils'\r\nimport constants from '../constants/constants'\r\n// import \r\n\r\nconst logUtil = require('../utils/log-utils');\r\n\r\nclass CustomerData {\r\n\r\n  /**\r\n   * 获取客户列表\r\n   * \r\n   * @param {any} page \r\n   * @param {any} options {conditions}\r\n   * @memberof customerData\r\n   */\r\n  async getList(page, options) {\r\n    let skip = 0;\r\n    let limit = page.pageSize || 100;\r\n    if (page.page) {\r\n      skip = Math.max(page.page-1,0) * limit;\r\n    }\r\n    let findOptions = options.options || {};\r\n    findOptions.limit = limit;\r\n    findOptions.skip = skip;\r\n    let conditions = options.conditions || {};\r\n    let total = await customerModel.find(conditions).count();\r\n    let customers = await customerModel.find(conditions, null, findOptions);\r\n    customers = customers.map((item) => {\r\n      return item;\r\n    })\r\n    return {\r\n      page:{page:page.page, pageSize:limit, total:total},\r\n      list: customers\r\n    };\r\n  }\r\n\r\n  async find(conditions, projection, options) {\r\n    let customer = await customerModel.findOne(conditions, projection, options);\r\n    if (customer) {\r\n      return customer;\r\n    } else {\r\n      throw new ApiError(ApiErrorNames.UPDATE_FAIL);\r\n    }\r\n  }\r\n\r\n  async add(doc, options={}) {\r\n    if (doc) {\r\n      let customer = new customerModel(doc);\r\n      if (customer) {\r\n        let newcustomer = await customer.save(options);\r\n        if (newcustomer) {\r\n          return newcustomer;\r\n        }\r\n      } else {\r\n        throw new ApiError(ApiErrorNames.ADD_FAIL);\r\n      }\r\n    } else {\r\n      throw new ApiError(ApiErrorNames.ADD_FAIL);\r\n    }\r\n  }\r\n\r\n  async update(conditions, doc, options) {\r\n    if (doc) {\r\n      let ret = await customerModel.update(conditions, doc, options);\r\n      return ret;\r\n    } else {\r\n      throw new ApiError(ApiErrorNames.UPDATE_FAIL);\r\n    }\r\n  }\r\n\r\n  async remove(conditions) {\r\n    if (conditions) {\r\n      return await model.deleteMany(conditions);\r\n    } else {\r\n      throw new ApiError(ApiErrorNames.DELETE_FAIL);\r\n    }\r\n  }\r\n\r\n  async removeByIds(ids) {\r\n    if (ids && ids.length > 0) {\r\n      return await customerModel.remove({_id:{$in:ids}});\r\n    } else {\r\n      throw new ApiError(ApiErrorNames.DELETE_FAIL);\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = new CustomerData()"]}