{"version":3,"sources":["../../../src/schemas/sales/queries.js"],"names":["types","DB","require","commonFields","commonUtils","schemasUtils","materialList","createDefaultListQuery","materialType","query","populate","goodsProfile","type","goodsType","args","id","resolve","root","params","options","getGoodsProfile","goodsList","name","fields","page","defaultPageType","list","pageSize","conditions","urlString2Conditions","getGoodsList","orderList","orderType","getOrderList"],"mappings":";;;;;;;AAAA;;AAWA;;IAAYA,K;;AACZ;;AACA;;;;;;AAMA,IAAMC,KAAKC,QAAQ,aAAR,CAAX;AACA,IAAMC,eAAeD,QAAQ,yBAAR,CAArB;AACA,IAAME,cAAcF,QAAQ,0BAAR,CAApB;AACA,IAAMG,eAAeH,QAAQ,2BAAR,CAArB;;AAEO,IAAMI,sCAAeD,aAAaE,sBAAb,CAAoC,cAApC,EAAoDP,MAAMQ,YAA1D,wBAAuF,UAACC,KAAD,EAAU;AAC3H,SAAOA,MAAMC,QAAN,CAAe,OAAf,CAAP;AACD,CAF2B,CAArB;;AAIA,IAAMC,sCAAe;AAC1BC,QAAMZ,MAAMa,SADc;AAE1BC,QAAM;AACJC,QAAI,EAACH,4BAAD;AADA,GAFoB;AAKpBI,SALoB,mBAKXC,IALW,EAKLC,MALK,EAKGC,OALH,EAKY;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACvB,iBAAUC,eAAV,CAA0BF,OAAOH,EAAjC,CADuB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAErC;AAPyB,CAArB;;AAUA,IAAMM,gCAAY;AACxBT,QAAM,+BAAsB;AACzBU,UAAM,WADmB;AAEzBC,YAAQ;AACNC,YAAM,EAACZ,MAAKT,aAAasB,eAAnB,EADA;AAENC,YAAM,EAACd,MAAK,yBAAgBZ,MAAMa,SAAtB,CAAN;AAFA;AAFiB,GAAtB,CADkB;AAQvBC,QAAM;AACJU,UAAM,EAACZ,yBAAD,EADF;AAEJe,cAAU,EAACf,yBAAD,EAFN;AAGJgB,gBAAY,EAAChB,4BAAD;AAHR,GARiB;AAalBI,SAbkB,mBAaTC,IAbS,EAaHC,MAbG,EAaKC,OAbL,EAac;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACnC,kBAAID,OAAOU,UAAX,EAAuB;AACrBV,uBAAOU,UAAP,GAAoBxB,YAAYyB,oBAAZ,CAAiCX,OAAOU,UAAxC,CAApB;AACD;AAHkC;AAAA,qBAItB,iBAAUE,YAAV,CAAuB,EAACN,MAAKN,OAAOM,IAAb,EAAmBG,UAAST,OAAOS,QAAnC,EAAvB,EAAqE,EAACC,YAAWV,OAAOU,UAAnB,EAArE,CAJsB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKrC;AAlBuB,CAAlB;;AAqBA,IAAMG,gCAAY;AACxBnB,QAAM,+BAAsB;AACzBU,UAAM,WADmB;AAEzBC,YAAQ;AACNC,YAAM,EAACZ,MAAKT,aAAasB,eAAnB,EADA;AAENC,YAAM,EAACd,MAAK,yBAAgBZ,MAAMgC,SAAtB,CAAN;AAFA;AAFiB,GAAtB,CADkB;AAQvBlB,QAAM;AACJU,UAAM,EAACZ,yBAAD,EADF;AAEJe,cAAU,EAACf,yBAAD,EAFN;AAGJgB,gBAAY,EAAChB,4BAAD;AAHR,GARiB;AAalBI,SAbkB,mBAaTC,IAbS,EAaHC,MAbG,EAaKC,OAbL,EAac;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACnC,kBAAID,OAAOU,UAAX,EAAuB;AACrBV,uBAAOU,UAAP,GAAoBxB,YAAYyB,oBAAZ,CAAiCX,OAAOU,UAAxC,CAApB;AACD;AAHkC;AAAA,qBAItB,iBAAUK,YAAV,CAAuB,EAACT,MAAKN,OAAOM,IAAb,EAAmBG,UAAST,OAAOS,QAAnC,EAAvB,EAAqE,EAACC,YAAWV,OAAOU,UAAnB,EAArE,CAJsB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKrC;AAlBuB,CAAlB","file":"queries.js","sourcesContent":["import {\r\n\tGraphQLList,\r\n  GraphQLObjectType,\r\n  GraphQLNonNull,\r\n  GraphQLString,\r\n  GraphQLID,\r\n  GraphQLInt,\r\n  GraphQLBoolean,\r\n  GraphQLInputObjectType\r\n} from 'graphql';\r\n\r\nimport * as types from './types';\r\nimport {salesData} from '../../data/index';\r\nimport { \r\n  materialModel, \r\n  goodsModel,\r\n  orderModel,\r\n} from '../../models/sales'\r\n\r\nconst DB = require('../../db/DB')\r\nconst commonFields = require('../common/common-fields')\r\nconst commonUtils = require('../../utils/common-utils')\r\nconst schemasUtils = require('../../utils/schemas-utils')\r\n\r\nexport const materialList = schemasUtils.createDefaultListQuery('materialList', types.materialType, materialModel, (query) =>{\r\n  return query.populate('color')\r\n});\r\n\r\nexport const goodsProfile = {\r\n  type: types.goodsType,\r\n  args: {\r\n    id: {type:GraphQLString},\r\n  },\r\n  async resolve (root, params, options) {\r\n    return await salesData.getGoodsProfile(params.id);\r\n  }\r\n};\r\n\r\nexport const goodsList = {\r\n\ttype: new GraphQLObjectType({\r\n    name: 'goodsList',\r\n    fields: {\r\n      page: {type:commonFields.defaultPageType},\r\n      list: {type:new GraphQLList(types.goodsType)}\r\n    }\r\n  }),\r\n  args: {\r\n    page: {type: GraphQLInt},\r\n    pageSize: {type: GraphQLInt},\r\n    conditions: {type:GraphQLString}\r\n  },\r\n\tasync resolve (root, params, options) {\r\n    if (params.conditions) {\r\n      params.conditions = commonUtils.urlString2Conditions(params.conditions);\r\n    }\r\n    return await salesData.getGoodsList({page:params.page, pageSize:params.pageSize}, {conditions:params.conditions})\r\n\t}\r\n}\r\n\r\nexport const orderList = {\r\n\ttype: new GraphQLObjectType({\r\n    name: 'orderList',\r\n    fields: {\r\n      page: {type:commonFields.defaultPageType},\r\n      list: {type:new GraphQLList(types.orderType)}\r\n    }\r\n  }),\r\n  args: {\r\n    page: {type: GraphQLInt},\r\n    pageSize: {type: GraphQLInt},\r\n    conditions: {type:GraphQLString}\r\n  },\r\n\tasync resolve (root, params, options) {\r\n    if (params.conditions) {\r\n      params.conditions = commonUtils.urlString2Conditions(params.conditions);\r\n    }\r\n    return await salesData.getOrderList({page:params.page, pageSize:params.pageSize}, {conditions:params.conditions})\r\n\t}\r\n}"]}