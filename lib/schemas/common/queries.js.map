{"version":3,"sources":["../../../src/schemas/common/queries.js"],"names":["types","commonFields","require","commonUtils","schemasUtils","menus","type","menu","resolve","ctx","params","options","getMenus","routers","router","getRouters","commonList","name","fields","page","defaultPageType","list","commonType","args","pageSize","conditions","root","urlString2Conditions","getCommonList"],"mappings":";;;;;;;AAAA;;AAUA;;IAAYA,K;;AACZ;;;;;;AAEA,IAAMC,eAAeC,QAAQ,yBAAR,CAArB;AACA,IAAMC,cAAcD,QAAQ,0BAAR,CAApB;AACA,IAAME,eAAeF,QAAQ,2BAAR,CAArB;;AAEO,IAAMG,wBAAQ;AACpBC,QAAM,yBAAgBN,MAAMO,IAAtB,CADc;AAEdC,SAFc,mBAELC,GAFK,EAEAC,MAFA,EAEQC,OAFR,EAEiB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACrB,kBAAWC,QAAX,CAAoBH,GAApB,EAAyBC,MAAzB,CADqB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEpC;AAJmB,CAAd;;AAOA,IAAMG,4BAAU;AACtBP,QAAM,yBAAgBN,MAAMc,MAAtB,CADgB;AAEhBN,SAFgB,mBAEPC,GAFO,EAEFC,MAFE,EAEMC,OAFN,EAEe;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACrB,kBAAWI,UAAX,CAAsBN,GAAtB,EAA2BC,MAA3B,CADqB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEpC;AAJqB,CAAhB;;AAOA,IAAMM,kCAAa;AACzBV,QAAM,+BAAsB;AACzBW,UAAM,YADmB;AAEzBC,YAAQ;AACNC,YAAM,EAACb,MAAKL,aAAamB,eAAnB,EADA;AAETC,YAAM,EAACf,MAAK,yBAAgBN,MAAMsB,UAAtB,CAAN;AAFG;AAFiB,GAAtB,CADmB;AAQxBC,QAAM;AACJJ,UAAM,EAACb,yBAAD,EADF;AAEJkB,cAAU,EAAClB,yBAAD,EAFN;AAGJmB,gBAAY,EAACnB,4BAAD;AAHR,GARkB;AAanBE,SAbmB,mBAaVkB,IAbU,EAaJhB,MAbI,EAaIC,OAbJ,EAaa;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACnC,kBAAID,OAAOe,UAAX,EAAuB;AACrBf,uBAAOe,UAAP,GAAoBtB,YAAYwB,oBAAZ,CAAiCjB,OAAOe,UAAxC,CAApB;AACH;AACGN,kBAJiC,GAI1B,EAACA,MAAK,CAAC,CAAP,EAAUK,UAAS,CAAnB,EAJ0B;;AAKrC,kBAAId,OAAOS,IAAP,IAAeT,OAAOc,QAA1B,EAAoC;AACnCL,qBAAKA,IAAL,GAAYT,OAAOS,IAAnB;AACAA,qBAAKK,QAAL,GAAgBd,OAAOc,QAAvB;AACA;AARoC;AAAA,qBAStB,kBAAWI,aAAX,CAAyB,IAAzB,EAA+B,EAACH,YAAWf,OAAOe,UAAnB,EAA/B,EAA+DN,IAA/D,CATsB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUrC;AAvBwB,CAAnB","file":"queries.js","sourcesContent":["import {\r\n\tGraphQLList,\r\n  GraphQLObjectType,\r\n  GraphQLNonNull,\r\n  GraphQLString,\r\n  GraphQLID,\r\n  GraphQLInt,\r\n  GraphQLBoolean,\r\n  GraphQLInputObjectType\r\n} from 'graphql';\r\nimport * as types from './types';\r\nimport {commonData} from '../../data/index';\r\n\r\nconst commonFields = require('../common/common-fields')\r\nconst commonUtils = require('../../utils/common-utils')\r\nconst schemasUtils = require('../../utils/schemas-utils')\r\n\r\nexport const menus = {\r\n\ttype: new GraphQLList(types.menu),\r\n\tasync resolve (ctx, params, options) {\r\n    return await commonData.getMenus(ctx, params);\r\n\t}\r\n}\r\n\r\nexport const routers = {\r\n\ttype: new GraphQLList(types.router),\r\n\tasync resolve (ctx, params, options) {\r\n    return await commonData.getRouters(ctx, params);\r\n\t}\r\n}\r\n\r\nexport const commonList = {\r\n\ttype: new GraphQLObjectType({\r\n    name: 'commonList',\r\n    fields: {\r\n      page: {type:commonFields.defaultPageType},\r\n\t\t\tlist: {type:new GraphQLList(types.commonType)}\r\n    }\r\n  }),\r\n  args: {\r\n    page: {type: GraphQLInt},\r\n    pageSize: {type: GraphQLInt},\r\n    conditions: {type:GraphQLString}\r\n  },\r\n\tasync resolve (root, params, options) {\r\n    if (params.conditions) {\r\n      params.conditions = commonUtils.urlString2Conditions(params.conditions);\r\n\t\t}\r\n\t\tlet page = {page:-1, pageSize:0};\r\n\t\tif (params.page && params.pageSize) {\r\n\t\t\tpage.page = params.page;\r\n\t\t\tpage.pageSize = params.pageSize;\r\n\t\t}\r\n    return await commonData.getCommonList(null, {conditions:params.conditions}, page)\r\n\t}\r\n}\r\n"]}