{"version":3,"sources":["../../../src/schemas/user.1/queries.js"],"names":["types","commonFields","require","adminList","type","name","fields","page","defaultPageType","list","userType","args","pageSize","resolve","root","params","options","user_type","admin","getUserList","ret"],"mappings":";;;;;;;AAAA;;AAWA;;IAAYA,K;;AACZ;;;;;;AACA,IAAMC,eAAeC,QAAQ,yBAAR,CAArB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO,IAAMC,gCAAY;AACxBC,QAAM,+BAAsB;AACzBC,UAAM,eADmB;AAEzBC,YAAQ;AACNC,YAAM,EAACH,MAAKH,aAAaO,eAAnB,EADA;AAENC,YAAM,EAACL,MAAK,yBAAgBJ,MAAMU,QAAtB,CAAN;AAFA;AAFiB,GAAtB,CADkB;AAQvBC,QAAM;AACJJ,UAAM,EAACH,yBAAD,EADF;AAEJQ,cAAU,EAACR,yBAAD;AAFN,GARiB;AAYlBS,SAZkB,mBAYTC,IAZS,EAYHC,MAZG,EAYKC,OAZL,EAYc;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACrCD,qBAAOE,SAAP,GAAmB,gBAASjB,KAAT,GAAiBkB,KAApC;AADqC;AAAA,qBAErB,gBAASC,WAAT,CAAqBL,IAArB,EAA2BC,MAA3B,CAFqB;;AAAA;AAEjCK,iBAFiC;AAAA,+CAG9BA,GAH8B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIrC;AAhBuB,CAAlB","file":"queries.js","sourcesContent":["import {\r\n\tGraphQLList,\r\n  GraphQLObjectType,\r\n  GraphQLNonNull,\r\n  GraphQLString,\r\n  GraphQLID,\r\n  GraphQLInt,\r\n  GraphQLBoolean,\r\n  GraphQLInputObjectType\r\n} from 'graphql';\r\n\r\nimport * as types from './types';\r\nimport {userData} from '../../data/index';\r\nconst commonFields = require('../common/common-fields')\r\n\r\n// export const adminList = {\r\n// \ttype: new GraphQLList(types.userType),\r\n//   args: {\r\n//     page: {type: GraphQLInt},\r\n//     pageSize: {type: GraphQLInt},\r\n//   },\r\n// \tasync resolve (root, params, options) {\r\n// \t\tparams.user_type = userData.types().admin;\r\n// \t\tvar users = await userData.getUserList(root, params);\r\n// \t\treturn users;\r\n// \t}\r\n// }\r\n\r\nexport const adminList = {\r\n\ttype: new GraphQLObjectType({\r\n    name: 'adminListPage',\r\n    fields: {\r\n      page: {type:commonFields.defaultPageType},\r\n      list: {type:new GraphQLList(types.userType)}\r\n    }\r\n  }),\r\n  args: {\r\n    page: {type: GraphQLInt},\r\n    pageSize: {type: GraphQLInt},\r\n  },\r\n\tasync resolve (root, params, options) {\r\n\t\tparams.user_type = userData.types().admin;\r\n\t\tvar ret = await userData.getUserList(root, params);\r\n\t\treturn ret;\r\n\t}\r\n}"]}