{"version":3,"sources":["../../../src/schemas/customer/mutations.js"],"names":["types","commonFields","require","schemasUtils","foot","createDefaultMutaion","footType","footInputType","belt","beltType","beltInputType","watchStrap","watchStrapType","watchStrapInputType","addCustomer","type","customerType","args","doc","name","customerInputType","resolve","ctx","params","options","add","customer","result","deleteCustomer","ids","removeByIds","ret","res","JSON","parse","ok","updateCustomer","operateResultType","update","_id","mutations"],"mappings":";;;;;;;;;AAAA;;AAWA;;IAAYA,K;;AACZ;;AACA;;;;;;AAMA,IAAMC,eAAeC,QAAQ,yBAAR,CAArB;AACA,IAAMC,eAAeD,QAAQ,2BAAR,CAArB;;AAEA,IAAME,OAAOD,aAAaE,oBAAb,CAAkC,MAAlC,EAA0CL,MAAMM,QAAhD,EAA0DN,MAAMO,aAAhE,sBAAb;AACA,IAAMC,OAAOL,aAAaE,oBAAb,CAAkC,MAAlC,EAA0CL,MAAMS,QAAhD,EAA0DT,MAAMU,aAAhE,sBAAb;AACA,IAAMC,aAAaR,aAAaE,oBAAb,CAAkC,YAAlC,EAAgDL,MAAMY,cAAtD,EAAsEZ,MAAMa,mBAA5E,4BAAnB;;AAEO,IAAMC,oCAAc;AACzBC,QAAMf,MAAMgB,YADa;AAEzBC,QAAM;AACJC,SAAK;AACHC,YAAM,KADH;AAEHJ,YAAM,4BAAmBf,MAAMoB,iBAAzB;AAFH;AADD,GAFmB;AAQnBC,SARmB,mBAQVC,GARU,EAQLC,MARK,EAQGC,OARH,EAQY;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACZ,oBAAaC,GAAb,CAAiBF,OAAOL,GAAxB,CADY;;AAAA;AAC7BQ,sBAD6B;;AAEnCJ,kBAAIK,MAAJ,GAAa,OAAb;AAFmC,+CAG5BD,QAH4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIpC;AAZwB,CAApB;;AAeA,IAAME,0CAAiB;AAC5Bb,QAAM,gDADsB;AAE5BE,QAAM;AACJY,SAAK,EAACd,MAAM,gDAAP;AADD,GAFsB;AAKtBM,SALsB,mBAKbC,GALa,EAKRC,MALQ,EAKAC,OALA,EAKS;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACjB,oBAAaM,WAAb,CAAyBP,OAAOM,GAAhC,CADiB;;AAAA;AAC7BE,iBAD6B;;AAAA,mBAE/BA,GAF+B;AAAA;AAAA;AAAA;;AAG7BC,iBAH6B,GAGvBC,KAAKC,KAAL,CAAWH,GAAX,CAHuB;;AAAA,oBAI7BA,IAAII,EAAJ,KAAW,CAJkB;AAAA;AAAA;AAAA;;AAAA,gDAIRZ,OAAOM,GAJC;;AAAA;AAAA,gDAK1B,IAL0B;;AAAA;AAAA,gDAO5B,IAP4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQpC;AAb2B,CAAvB;;AAgBA,IAAMO,0CAAiB;AAC5BrB,QAAMd,aAAaoC,iBADS;AAE5BpB,QAAM;AACJC,SAAK,EAACH,MAAMf,MAAMoB,iBAAb;AADD,GAFsB;AAKtBC,SALsB,mBAKbC,GALa,EAKRC,MALQ,EAKAC,OALA,EAKS;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACtB,oBAAac,MAAb,CAAoB,EAACC,KAAIhB,OAAOL,GAAP,CAAWqB,GAAhB,EAApB,EAA0ChB,OAAOL,GAAjD,CADsB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEpC;AAP2B,CAAvB;;AAUP,IAAIsB;AACF1B,0BADE;AAEFc,gCAFE;AAGFQ;AAHE,GAIChC,IAJD,EAKCI,IALD,EAMCG,UAND,CAAJ;kBAQe6B,S","file":"mutations.js","sourcesContent":["import {\r\n  GraphQLObjectType,\r\n  GraphQLNonNull,\r\n  GraphQLString,\r\n  GraphQLID,\r\n  GraphQLInt,\r\n  GraphQLBoolean,\r\n  GraphQLInputObjectType,\r\n  GraphQLList\r\n} from 'graphql';\r\n\r\nimport * as types from './types';\r\nimport {userData, customerData} from '../../data/index';\r\nimport { \r\n  footModel,\r\n  customerModel,\r\n  beltModel,\r\n  watchStrapModel\r\n} from '../../models/customer'\r\nconst commonFields = require('../common/common-fields')\r\nconst schemasUtils = require('../../utils/schemas-utils')\r\n\r\nconst foot = schemasUtils.createDefaultMutaion('foot', types.footType, types.footInputType, footModel);\r\nconst belt = schemasUtils.createDefaultMutaion('belt', types.beltType, types.beltInputType, beltModel);\r\nconst watchStrap = schemasUtils.createDefaultMutaion('watchStrap', types.watchStrapType, types.watchStrapInputType, watchStrapModel);\r\n\r\nexport const addCustomer = {\r\n  type: types.customerType,\r\n  args: {\r\n    doc: {\r\n      name: 'doc',\r\n      type: new GraphQLNonNull(types.customerInputType)\r\n    }\r\n  },\r\n  async resolve (ctx, params, options) {\r\n    const customer = await customerData.add(params.doc)\r\n    ctx.result = '添加成功！';\r\n    return customer;\r\n  }\r\n};\r\n\r\nexport const deleteCustomer = {\r\n  type: new GraphQLList(GraphQLString),\r\n  args: {\r\n    ids: {type: new GraphQLList(GraphQLString)}\r\n  },\r\n  async resolve (ctx, params, options) {\r\n    const ret = await customerData.removeByIds(params.ids);\r\n    if (ret) {\r\n      let res = JSON.parse(ret);\r\n      if (ret.ok === 1) return params.ids;\r\n      return null;\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nexport const updateCustomer = {\r\n  type: commonFields.operateResultType,\r\n  args: {\r\n    doc: {type: types.customerInputType},\r\n  },\r\n  async resolve (ctx, params, options) {\r\n    return await customerData.update({_id:params.doc._id}, params.doc);\r\n  }\r\n}\r\n\r\nlet mutations = {\r\n  addCustomer,\r\n  deleteCustomer,\r\n  updateCustomer,\r\n  ...foot, \r\n  ...belt, \r\n  ...watchStrap\r\n};\r\nexport default mutations;"]}