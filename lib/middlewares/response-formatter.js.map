{"version":3,"sources":["../../src/middlewares/response-formatter.js"],"names":["require","ApiError","ApiErrorNames","responseFormatter","ctx","console","log","JSON","stringify","body","parse","errors","error","length","code","message","data","result","urlFilter","pattern","next","reg","RegExp","test","originalUrl","status","module","exports"],"mappings":"AAAA;;;;eAEkCA,QAAQ,qBAAR,C;IAA3BC,Q,YAAAA,Q;IAAUC,a,YAAAA,a;;AAEjB;;;;;AAGA,IAAIC,oBAAoB,SAApBA,iBAAoB,CAACC,GAAD,EAAS;AAC7B;AACAC,YAAQC,GAAR,CAAY,sBAAsBC,KAAKC,SAAL,CAAeJ,IAAIK,IAAnB,CAAlC;AACA;AACA,QAAIL,IAAIK,IAAR,EAAc;AACV,YAAIA,OAAOF,KAAKG,KAAL,CAAWN,IAAIK,IAAf,CAAX;;AAEA,YAAIA,KAAKE,MAAT,EAAkB;AACd,gBAAIC,QAAQH,KAAKE,MAAL,CAAYE,MAAZ,GAAqB,CAArB,GAAyBJ,KAAKE,MAAL,CAAY,CAAZ,CAAzB,GAA0CF,KAAKE,MAA3D;AACA,gBAAI,OAAOC,MAAME,IAAb,IAAoB,WAAxB,EAAqC;AACjCV,oBAAIK,IAAJ,GAAW;AACPK,0BAAM,CAAC,CADA;AAEPC,6BAASR,KAAKC,SAAL,CAAeI,KAAf;AAFF,iBAAX;AAIH,aALD,MAKO;AACHR,oBAAIK,IAAJ,GAAW;AACPK,0BAAMF,MAAME,IADL;AAEPC,6BAASH,MAAMG,OAFR;AAGPC,0BAAMP,KAAKO;AAHJ,iBAAX;AAKH;AACJ,SAdD,MAcO;AACHZ,gBAAIK,IAAJ,GAAW;AACPK,sBAAM,CADC;AAEPC,yBAASX,IAAIa,MAAJ,IAAc,EAFhB;AAGPD,sBAAMP,KAAKO;AAHJ,aAAX;AAKH;AACJ,KAxBD,MAwBO;AACHZ,YAAIK,IAAJ,GAAW;AACPK,kBAAM,CADC;AAEPC,qBAAS;AAFF,SAAX;AAIH;AACJ,CAlCD;;AAoCA,IAAIG,YAAY,SAAZA,SAAY,CAASC,OAAT,EAAkB;AAAA;;AAE9B;AAAA,2EAAO,iBAAMf,GAAN,EAAWgB,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,+BADD,GACO,IAAIC,MAAJ,CAAWH,OAAX,CADP;AAAA;AAAA;AAAA,mCAIOC,MAJP;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAMC;AACA,gCAAI,uBAAiBnB,QAAjB,IAA6BoB,IAAIE,IAAJ,CAASnB,IAAIoB,WAAb,CAAjC,EAA4D;AACxDpB,oCAAIqB,MAAJ,GAAa,GAAb;AACArB,oCAAIK,IAAJ,GAAW;AACPK,0CAAM,YAAMA,IADL;AAEPC,6CAAS,YAAMA;AAFR,iCAAX;AAIH;AACD;AAdD;;AAAA;;AAkBH;AACA,gCAAIM,IAAIE,IAAJ,CAASnB,IAAIoB,WAAb,CAAJ,EAA+B;AAC3BrB,kDAAkBC,GAAlB;AACH;;AArBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;;AAAA;AAAA;AAAA;AAAA;AAuBH,CAzBD;AA0BAsB,OAAOC,OAAP,GAAiBT,SAAjB","file":"response-formatter.js","sourcesContent":["'use strict'\r\n\r\nconst {ApiError, ApiErrorNames} = require('../error/api-errors');\r\n\r\n/**\r\n * 在app.use(router)之前调用\r\n */\r\nvar responseFormatter = (ctx) => {\r\n    //如果有返回数据，将返回数据添加到data中\r\n    console.log('responseFormatter' + JSON.stringify(ctx.body));\r\n    // console.log('responseFormatter message ' + ctx.result);\r\n    if (ctx.body) {\r\n        let body = JSON.parse(ctx.body);\r\n        \r\n        if (body.errors ) {\r\n            let error = body.errors.length > 0 ? body.errors[0] : body.errors;\r\n            if (typeof(error.code)==\"undefined\") {\r\n                ctx.body = {\r\n                    code: -1,\r\n                    message: JSON.stringify(error)\r\n                }\r\n            } else {\r\n                ctx.body = {\r\n                    code: error.code,\r\n                    message: error.message,\r\n                    data: body.data\r\n                }\r\n            }\r\n        } else {\r\n            ctx.body = {\r\n                code: 0,\r\n                message: ctx.result || '',\r\n                data: body.data\r\n            }\r\n        }\r\n    } else {\r\n        ctx.body = {\r\n            code: 0,\r\n            message: ''\r\n        }\r\n    }\r\n}\r\n\r\nvar urlFilter = function(pattern) {\r\n\r\n    return async(ctx, next) => {\r\n        var reg = new RegExp(pattern);\r\n        try {\r\n            //先去执行路由\r\n            await next();\r\n        } catch (error) {\r\n            //如果异常类型是API异常并且通过正则验证的url，将错误信息添加到响应体中返回。\r\n            if (error instanceof ApiError && reg.test(ctx.originalUrl)) {\r\n                ctx.status = 200;\r\n                ctx.body = {\r\n                    code: error.code,\r\n                    message: error.message\r\n                }\r\n            }\r\n            //继续抛，让外层中间件处理日志\r\n            throw error;\r\n        }\r\n\r\n        //通过正则的url进行格式化处理\r\n        if (reg.test(ctx.originalUrl)) {\r\n            responseFormatter(ctx);\r\n        }\r\n    }\r\n}\r\nmodule.exports = urlFilter;"]}