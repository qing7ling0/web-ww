{"version":3,"sources":["../../src/utils/schemas-utils.js"],"names":["commonUtils","require","commonFields","createDefaultListQuery","name","type","model","onQuery","fields","page","defaultPageType","list","args","conditions","pageSize","resolve","root","params","options","urlString2Conditions","console","log","JSON","stringify","ret","getList","createDefaultProfileQuery","id","findById","createDefaultMutaion","tag","inputType","doc","ctx","add","ids","removeByIds","parse","ok","operateResultType","_id","update"],"mappings":"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","file":"schemas-utils.js","sourcesContent":["import {\r\n  GraphQLObjectType,\r\n  GraphQLNonNull,\r\n  GraphQLString,\r\n  GraphQLID,\r\n  GraphQLInt,\r\n  GraphQLBoolean,\r\n  GraphQLInputObjectType,\r\n  GraphQLList,\r\n} from 'graphql';\r\nimport DB from '../db/DB'\r\nconst commonUtils = require('./common-utils')\r\nconst commonFields = require('../schemas/common/common-fields')\r\n\r\nexport const createDefaultListQuery = (name, type, model, onQuery) => {\r\n  return {\r\n    type: new GraphQLObjectType({\r\n      name: name,\r\n      fields: {\r\n        page: {type:commonFields.defaultPageType},\r\n        list: {type:new GraphQLList(type)}\r\n      }\r\n    }),\r\n    args: {\r\n      conditions: {type:GraphQLString},\r\n      page: {type: GraphQLInt},\r\n      pageSize: {type: GraphQLInt},\r\n    },\r\n    async resolve (root, params, options) {\r\n      if (params.conditions) {\r\n        params.conditions = commonUtils.urlString2Conditions(params.conditions);\r\n      }\r\n      console.log(JSON.stringify(params));\r\n      let ret =[];\r\n      if (params.page > -1) {\r\n        ret = await DB.getList(model, {conditions:params.conditions}, {page:params.page, pageSize:params.pageSize}, onQuery);\r\n      } else {\r\n        ret = await DB.getList(model, {conditions:params.conditions}, null, onQuery);\r\n      }\r\n      console.log(JSON.stringify(ret));\r\n      return ret;\r\n    }\r\n  }\r\n}\r\n\r\nexport const createDefaultProfileQuery = (type, model) => {\r\n  return {\r\n    type: type,\r\n    args: {\r\n      id: {type:GraphQLString},\r\n    },\r\n    async resolve (root, params, options) {\r\n      return await DB.findById(model, params.id);\r\n    }\r\n  };\r\n}\r\n\r\nexport const createDefaultMutaion = (tag, type, inputType, model) => {\r\n  let ret = {};\r\n  ret[`${tag}Add`] = {\r\n    type: type,\r\n    args: {\r\n      doc: {type:inputType},\r\n    },\r\n    async resolve (ctx, params, options) {\r\n      return await DB.add(model, params.doc);\r\n    }\r\n  };\r\n  ret[`${tag}Remove`] = {\r\n    type: new GraphQLList(GraphQLString),\r\n    args: {\r\n      ids: {type:new GraphQLList(GraphQLString)}\r\n    },\r\n    async resolve (ctx, params, options) {\r\n      let ret = await DB.removeByIds(model, params.ids);\r\n      if (ret) {\r\n        ret = JSON.parse(ret);\r\n        if (ret.ok) {\r\n          return params.ids;\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  };\r\n  ret[`${tag}Update`] = {\r\n    type: commonFields.operateResultType,\r\n    args: {\r\n      doc: {type:inputType},\r\n      conditions: {type:GraphQLString},\r\n      id: {type:GraphQLString},\r\n    },\r\n    async resolve (ctx, params, options) {\r\n      if (params.conditions) {\r\n        params.conditions = commonUtils.urlString2Conditions(params.conditions);\r\n      } else {\r\n        params.conditions = {_id:params.id};\r\n      }\r\n      return await DB.update(model, params.conditions, params.doc);\r\n    }\r\n  };\r\n  return ret;\r\n}"]}