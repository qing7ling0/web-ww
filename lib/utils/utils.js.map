{"version":3,"sources":["../../src/utils/utils.js"],"names":["module","exports","isAccountValid","value","tel","test","isPasswordValid","sha1","createHash","update","digest","diffent","newValue","oldValue","Object","prototype","toString","call","ret","key"],"mappings":";;AAAA;;;;;;AAEA;;;AAGAA,OAAOC,OAAP,CAAeC,cAAf,GAAgC,UAASC,KAAT,EAAgB;AAC9C,MAAIC,MAAM,kBAAV;AACA,SAAOA,IAAIC,IAAJ,CAASF,KAAT,CAAP;AACD,CAHD;;AAKA;;;AAGAH,OAAOC,OAAP,CAAeK,eAAf,GAAiC,UAASH,KAAT,EAAgB;AAC/C,MAAIC,MAAM,wDAAV;AACA,SAAOA,IAAIC,IAAJ,CAASF,KAAT,CAAP;AACD,CAHD;;AAKAH,OAAOC,OAAP,CAAeM,IAAf,GAAsB,UAASJ,KAAT,EAAgB;AACpC,MAAII,OAAO,iBAAOC,UAAP,CAAkB,MAAlB,CAAX;AACDD,OAAKE,MAAL,CAAYN,KAAZ,EAAmB,MAAnB;AACA,SAAOI,KAAKG,MAAL,CAAY,KAAZ,CAAP;AACA,CAJD;;AAMAV,OAAOC,OAAP,CAAeU,OAAf,GAAyB,UAASC,QAAT,EAAmBC,QAAnB,EAA6B;AACpD,MAAIC,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BL,QAA/B,MAA6C,iBAA7C,IACFE,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BJ,QAA/B,MAA6C,iBAD/C,EACkE;AAChE,WAAO,EAAP;AACD;;AAED,MAAIK,MAAM,EAAV;AACA,OAAI,IAAIC,GAAR,IAAeP,QAAf,EAAyB;AACvB,QAAIO,OAAON,QAAX,EAAqB;AACnB,UAAIA,SAASM,GAAT,MAAkBP,SAASO,GAAT,CAAtB,EAAqC;AACnCD,YAAIC,GAAJ,IAAWP,SAASO,GAAT,CAAX;AACD;AACF,KAJD,MAIO;AACLD,UAAIC,GAAJ,IAAWP,SAASO,GAAT,CAAX;AACD;AACF;;AAED,SAAOD,GAAP;AACD,CAlBD","file":"utils.js","sourcesContent":["import crypto from 'crypto'\r\n\r\n/**\r\n * 是否是有效的帐号\r\n */\r\nmodule.exports.isAccountValid = function(value) {\r\n  var tel = /^[a-zA-Z0-9_-]*$/;\r\n  return tel.test(value);\r\n}\r\n\r\n/**\r\n * 是否是有效的密码\r\n */\r\nmodule.exports.isPasswordValid = function(value) {\r\n  var tel = /^[0-9a-zA-Z~!@#$%\\^&*\\(\\)_+-=\\[\\]\\{\\<\\>\\,\\.\\/?|\\`\\}]*$/;\r\n  return tel.test(value);\r\n}\r\n\r\nmodule.exports.sha1 = function(value) {\r\n  var sha1 = crypto.createHash('sha1');\r\n\tsha1.update(value, 'utf8');\r\n\treturn sha1.digest('hex');\r\n}\r\n\r\nmodule.exports.diffent = function(newValue, oldValue) {\r\n  if (Object.prototype.toString.call(newValue) !== \"[object Object]\" ||\r\n    Object.prototype.toString.call(oldValue) !== \"[object Object]\") {\r\n    return {};\r\n  }\r\n\r\n  let ret = {};\r\n  for(let key in newValue) {\r\n    if (key in oldValue) {\r\n      if (oldValue[key] !== newValue[key]) {\r\n        ret[key] = newValue[key];\r\n      }\r\n    } else {\r\n      ret[key] = newValue[key];\r\n    }\r\n  }\r\n\r\n  return ret;\r\n}"]}